-----------------------Assignment_9--------------------------------
--------------------Yevgen Liepieshkov-----------------------------

class Student:
    # class ("static") members and intended constants
    DEFAULT_NAME = "zz-error"
    DEFAULT_POINTS = 0
    MAX_POINTS = 30
    SORT_BY_FIRST = 88
    SORT_BY_LAST = 98
    SORT_BY_POINTS = 108
    sort_key = SORT_BY_LAST

    # initializer ("constructor") method -------------------
    def __init__(self,
                 last=DEFAULT_NAME,
                 first=DEFAULT_NAME,
                 points=DEFAULT_POINTS):
        # instance attributes
        if (not self.set_last_name(last)):
            self.last_name = Student.DEFAULT_NAME
        if (not self.set_first_name(first)):
            self.first_name = Student.DEFAULT_NAME
        if (not self.set_points(points)):
            self.total_points = Student.DEFAULT_POINTS

    # mutator ("set") methods -------------------------------
    def set_last_name(self, last):
        if not self.valid_string(last):
            return False
        # else
        self.last_name = last
        return True

    def set_first_name(self, first):
        if not self.valid_string(first):
            return False
        # else
        self.first_name = first
        return True

    def set_points(self, points):
        if not self.valid_points(points):
            return False
        # else
        self.total_points = points
        return True

    # accessor ("get") methods -------------------------------
    def get_last_name(self):
        return self.last_name

    def get_first_name(self):
        return self.first_name

    def get_total_points(self):
        return self.total_points

    # output method  ----------------------------------------
    def display(self, client_intro_str="--- STUDENT DATA ---"):
        print(client_intro_str + str(self))

    # standard python stringizer ------------------------
    def __str__(self):
        return self.to_string()

    # instance helpers -------------------------------
    def to_string(self, optional_title=" ---------- "):
        ret_str = ((optional_title
                    + "\n    name: {}, {}"
                    + "\n    total points: {}.").
                   format(self.last_name, self.first_name,
                          self.total_points))
        return ret_str

    # static/class methods -----------------------------------
    @classmethod
    def compare_two_students(cls, first_stud, second_stud):
        if cls.get_sort_key() == cls.SORT_BY_FIRST:
            return cls.compare_strings_ignore_case(first_stud.get_first_name(), second_stud.get_first_name())
        if cls.get_sort_key() == cls.SORT_BY_LAST:
            return cls.compare_strings_ignore_case(first_stud.get_last_name(), second_stud.get_last_name())
        if cls.get_sort_key() == cls. SORT_BY_POINTS:
            return first_stud.get_total_points() - second_stud.get_total_points()

    @staticmethod
    def valid_string(test_str):
        if (len(test_str) > 0) and test_str[0].isalpha():
            return True
        return False

    @classmethod
    def valid_points(cls, test_points):
        if 0 <= test_points <= cls.MAX_POINTS:
            return False
        else:
            return True

    @staticmethod
    def compare_strings_ignore_case(first_string, second_string):
        """ returns -1 if first < second, lexicographically,
           +1 if first > second, and 0 if same
           this particular version based on last name only
           (case insensitive) """

        fst_upper = first_string.upper()
        scnd_upper = second_string.upper()
        if fst_upper < scnd_upper:
            return -1
        # else if
        if fst_upper > scnd_upper:
            return 1
        # else
        return 0

    @classmethod
    def set_sort_key(cls, key):
        if key is cls.SORT_BY_LAST or cls.SORT_BY_FIRST or cls.SORT_BY_POINTS:
            cls.sort_key = key
            return True
        else:
            print("Invalid sort key")
            return False

    @classmethod
    def get_sort_key(cls):
        return cls.sort_key

# beginning of class StudentArrayUtilities definition ---------------
class StudentArrayUtilities:
    @classmethod
    def to_string(cls, stud_array,
                    optional_title="--- The Students -----------:\n"):
        return cls.to_string(stud_array, optional_title)

    @classmethod
    def array_sort(cls, data, array_size):
        for k in range(array_size):
            if not cls.float_largest_to_top(data, array_size - k):
                return

    @staticmethod
    def float_largest_to_top(data, array_size):

        changed = False

        # notice we stop at array_size - 2 because of expr. k + 1 in loop
        for k in range(array_size - 1):

            if Student.compare_two_students(data[k],data[k+1]) > 0:
                data[k], data[k + 1] = data[k + 1], data[k]
                changed = True

        return changed

    NOT_FOUND = -1  # static constant best defined at top of class

    @classmethod
    def array_search(cls, data, array_size, key_first, key_last):
        for k in range(array_size):
            if (data[k].get_last_name() == key_last
                    and data[k].get_first_name() == key_first):
                return k  # found match, return index
        return cls.NOT_FOUND

    # class stringizers ----------------------------------

    @staticmethod
    def to_string(stud_array,
                  optional_title="--- The Students -----------:\n"):
        ret_val = optional_title + "\n"
        for student in stud_array:
            ret_val = ret_val + str(student) + "\n"
        return ret_val

    @classmethod
    def get_median_destructive(cls, array, array_size):
        temp = Student.get_sort_key()
        Student.set_sort_key(Student.SORT_BY_POINTS)
        cls.array_sort(array, array_size)
        if array_size <= 0:
            Student.set_sort_key(temp)
            return 0
        if array_size % 2 == 0 :
            Student.set_sort_key(temp)
            half = int(array_size/2)
            result = (array[half-1].get_total_points() + array[half].get_total_points())/2
            return result
        if array_size % 2 > 0:
            i = int((array_size / 2) - 0.5)
            Student.set_sort_key(temp)
            return array[i].get_total_points()
# client --------------------------------------------
# instantiate some students, one with an illegal name ...


my_student_1 = [Student("smith", "fred", 95)]

my_students_15 = \
    [
        Student("No", "name", 32),
        Student("Nick", "theGreek", 87),
        Student("Pepper", "Jack", 199),
        Student("Hola", "Amigo", 105),
        Student("Never", "Stop", 234),
        Student("Yevgen", "L", 132),
        Student("me", "ed", 123),
        Student("smith", "fred", 95),
        Student("bauer", "jack", 123),
        Student("jacobs", "carrie", 195),
        Student("renquist", "abe", 148),
        Student("3ackson", "trevor", 108),
        Student("perry", "fred", 225),
        Student("lewis", "frank", 44),
        Student("stollings", "pamela", 452)
    ]

my_students_16 = \
    [
        Student("Yes", "it'sme", 2),
        Student("No", "name", 31),
        Student("Nick", "theGreek", 87),
        Student("Pepper", "Jack", 199),
        Student("Hola", "Amigo", 105),
        Student("Never", "Stop", 234),
        Student("Yevgen", "L", 132),
        Student("me", "ed", 123),
        Student("smith", "fred", 95),
        Student("bauer", "jack", 124),
        Student("jacobs", "carrie", 195),
        Student("renquist", "abe", 148),
        Student("3ackson", "trevor", 108),
        Student("perry", "fred", 225),
        Student("lewis", "frank", 44),
        Student("stollings", "pamela", 452)
    ]

array_size_1 = len(my_student_1)
array_size_15 = len(my_students_15)
array_size_16 = len(my_students_16)

print(StudentArrayUtilities.to_string(my_students_16, "Before default sort (even): "))

StudentArrayUtilities.array_sort(my_students_16, array_size_16)
print(StudentArrayUtilities.to_string(my_students_16, "After default sort (even): "))

Student.set_sort_key(Student.SORT_BY_FIRST)
StudentArrayUtilities.array_sort(my_students_16, array_size_16)
print(StudentArrayUtilities.to_string(my_students_16, "After sort BY FIRST: "))

Student.set_sort_key(Student.SORT_BY_POINTS)
StudentArrayUtilities.array_sort(my_students_16, array_size_16)
print(StudentArrayUtilities.to_string(my_students_16, "After sort BY POINTS: "))

Student.set_sort_key(Student.SORT_BY_FIRST)
print("Median of even class = ", StudentArrayUtilities.get_median_destructive(my_students_16, array_size_16))

if Student.get_sort_key() == Student.SORT_BY_FIRST:
    print("Successfully preserved sort key.")

print("Median of odd class = ", StudentArrayUtilities.get_median_destructive(my_students_15, array_size_15))
print("Median of small class = ", StudentArrayUtilities.get_median_destructive(my_student_1, array_size_1))

------------------------------------------RUN------------------------------------------------

Before default sort (even):
 ----------
    name: Yes, it'sme
    total points: 0.
 ----------
    name: No, name
    total points: 31.
 ----------
    name: Nick, theGreek
    total points: 87.
 ----------
    name: Pepper, Jack
    total points: 199.
 ----------
    name: Hola, Amigo
    total points: 105.
 ----------
    name: Never, Stop
    total points: 234.
 ----------
    name: Yevgen, L
    total points: 132.
 ----------
    name: me, ed
    total points: 123.
 ----------
    name: smith, fred
    total points: 95.
 ----------
    name: bauer, jack
    total points: 124.
 ----------
    name: jacobs, carrie
    total points: 195.
 ----------
    name: renquist, abe
    total points: 148.
 ----------
    name: zz-error, trevor
    total points: 108.
 ----------
    name: perry, fred
    total points: 225.
 ----------
    name: lewis, frank
    total points: 44.
 ----------
    name: stollings, pamela
    total points: 452.

After default sort (even):
 ----------
    name: bauer, jack
    total points: 124.
 ----------
    name: Hola, Amigo
    total points: 105.
 ----------
    name: jacobs, carrie
    total points: 195.
 ----------
    name: lewis, frank
    total points: 44.
 ----------
    name: me, ed
    total points: 123.
 ----------
    name: Never, Stop
    total points: 234.
 ----------
    name: Nick, theGreek
    total points: 87.
 ----------
    name: No, name
    total points: 31.
 ----------
    name: Pepper, Jack
    total points: 199.
 ----------
    name: perry, fred
    total points: 225.
 ----------
    name: renquist, abe
    total points: 148.
 ----------
    name: smith, fred
    total points: 95.
 ----------
    name: stollings, pamela
    total points: 452.
 ----------
    name: Yes, it'sme
    total points: 0.
 ----------
    name: Yevgen, L
    total points: 132.
 ----------
    name: zz-error, trevor
    total points: 108.

After sort BY FIRST:
 ----------
    name: renquist, abe
    total points: 148.
 ----------
    name: Hola, Amigo
    total points: 105.
 ----------
    name: jacobs, carrie
    total points: 195.
 ----------
    name: me, ed
    total points: 123.
 ----------
    name: lewis, frank
    total points: 44.
 ----------
    name: perry, fred
    total points: 225.
 ----------
    name: smith, fred
    total points: 95.
 ----------
    name: Yes, it'sme
    total points: 0.
 ----------
    name: bauer, jack
    total points: 124.
 ----------
    name: Pepper, Jack
    total points: 199.
 ----------
    name: Yevgen, L
    total points: 132.
 ----------
    name: No, name
    total points: 31.
 ----------
    name: stollings, pamela
    total points: 452.
 ----------
    name: Never, Stop
    total points: 234.
 ----------
    name: Nick, theGreek
    total points: 87.
 ----------
    name: zz-error, trevor
    total points: 108.

After sort BY POINTS:
 ----------
    name: Yes, it'sme
    total points: 0.
 ----------
    name: No, name
    total points: 31.
 ----------
    name: lewis, frank
    total points: 44.
 ----------
    name: Nick, theGreek
    total points: 87.
 ----------
    name: smith, fred
    total points: 95.
 ----------
    name: Hola, Amigo
    total points: 105.
 ----------
    name: zz-error, trevor
    total points: 108.
 ----------
    name: me, ed
    total points: 123.
 ----------
    name: bauer, jack
    total points: 124.
 ----------
    name: Yevgen, L
    total points: 132.
 ----------
    name: renquist, abe
    total points: 148.
 ----------
    name: jacobs, carrie
    total points: 195.
 ----------
    name: Pepper, Jack
    total points: 199.
 ----------
    name: perry, fred
    total points: 225.
 ----------
    name: Never, Stop
    total points: 234.
 ----------
    name: stollings, pamela
    total points: 452.

Median of even class =  123.5
Successfully preserved sort key.
Median of odd class =  123
Median of small class =  95
