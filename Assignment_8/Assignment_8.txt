----------------------Assignment_8--------------------
-------------------Yevgen Liepieshkov-----------------

class DateProfile:

    MIN_NUM = 1    # I use this numbers through methods so instead of creating 4 range limits
    MAX_NUM = 10    # I've created 2 cross romance and finance range limits
    MIN_NAME_LEN = 2
    DEFAULT_GEND = 'M'
    DEFAULT_SEARCH_GEND = 'F'
    DEFAULT_NAME = 'NO NAME'

    def __init__(self,
                 gender=DEFAULT_GEND,
                 search_gender=DEFAULT_SEARCH_GEND,
                 romance=MIN_NUM,
                 finance=MIN_NUM,
                 name=DEFAULT_NAME):
        if not self.set_gender(gender):
            self.gender = DateProfile.DEFAULT_GEND
        if not self.set_search_gend(search_gender):
            self.search_gender = DateProfile.DEFAULT_SEARCH_GEND
        if not self.set_romance(romance):
            self.romance = DateProfile.MAX_NUM
        if not self.set_finance(finance):
            self.finance = DateProfile.MAX_NUM
        if not self.set_name(name):
            self.name = DateProfile.DEFAULT_NAME

    def set_gender(self, gend):
        if not self.valid_gender(gend):
            return False
        # else
        self.gender = gend
        return True

    def set_search_gend(self, search_gend):
        if not self.valid_gender(search_gend):
            return False
        # else
        self.search_gender = search_gend
        return True

    def set_romance(self, val):
        if not self.valid_number(val):
            return False
        # else
        self.romance = val
        return True

    def set_finance(self, val):
        if not self.valid_number(val):
            return False
        # else
        self.finance = val
        return True

    def set_name(self, name):
        if not self.valid_string(name):
            return False
        # else
        self.name = name
        return True

    def set_all(self, gend, search_gend, rom, fin, nam):
        self.set_gender(gend)
        self.set_search_gend(search_gend)
        self.set_romance(rom)
        self.set_finance(fin)
        self.set_name(nam)

    def set_defaults(self):
        self.gender = DateProfile.DEFAULT_GEND
        self.search_gender = DateProfile.DEFAULT_SEARCH_GEND
        self.romance = DateProfile.MIN_NUM
        self.finance = DateProfile.MIN_NUM
        self.name = DateProfile.DEFAULT_NAME

    # accessor ("get") methods -------------------------------

    def get_gender(self):
        return self.gender

    def get_search_gender(self):
        return self.search_gender

    def get_romance(self):
        return self.romance

    def get_finance(self):
        return self.finance

    def get_name(self):
        return self.name

    # instance methods ------------------------------------------

    def fit_value(self, partner):
        if self.determine_gender_fit(partner) == 1:
            return (self.determine_finance_fit(partner) + self.determine_romance_fit(partner)) / 2
        return 0

    def determine_gender_fit(self, partner):
        if self.gender == partner.get_search_gender()\
                and self.search_gender == partner.get_gender():
            return 1
        return 0

    def determine_romance_fit(self, partner):

        ans = self.romance - partner.get_romance()

        if ans > 0:
            return 1 - ans/10
        elif ans < 0:
            return 1 - ans / -10
        return 1.0

    def determine_finance_fit(self, partner):

        ans = self.finance - partner.get_finance()

        if ans > 0:
            return 1 - ans / 10
        elif ans < 0:
            return 1 - ans / -10
        return 1.0

    def __str__(self):
        return self.to_string()

    def to_string(self):
        ret_str = "{}({}) searching for {}, w/fin={} and rom={}"\
            .format(self.name, self.gender, self.search_gender, self.finance, self.romance)
        return ret_str

    @classmethod
    def valid_string(cls, the_str):
        if len(the_str) >= cls.MIN_NAME_LEN:
            return True
        print(the_str, " name length is to small")
        return False

    @classmethod
    def valid_number(cls, the_val):
        if cls.MIN_NUM <= int(the_val) <= cls.MAX_NUM:
            return True
        print(the_val, " is invalid number should be from 1 to 10")
        return False

    @staticmethod
    def valid_gender(gen):
        if gen.upper() == 'M' or gen.upper() == 'F':
            return True
        print(gen, " is invalid gender")
        return False


def display_two_profiles(profile1, profile2):
    print("Fit between {} and {}:  {:.3f}.".format(profile1.get_name(),
                                                   profile2.get_name(),
                                                   profile1.fit_value(profile2)))

    # --------------------Part 1--------------------------


profile1 = DateProfile('M', 'F', 10, 10, "Yevgen")
print("Data Profile:\n  " + str(profile1))
profile2 = DateProfile('F', 'M', 10, 10, "Nastia")
print("Data Profile:\n  " + str(profile2))
profile3 = DateProfile('F', 'F', 2, 7, "Alex")
print("Data Profile:\n  " + str(profile3))
profile4 = DateProfile('F', 'F', 3, 5, "Lili")
print("Data Profile:\n  " + str(profile4))
print()

display_two_profiles(profile1, profile1)
display_two_profiles(profile1, profile2)
display_two_profiles(profile1, profile3)
display_two_profiles(profile1, profile4)
print()
display_two_profiles(profile2, profile1)
display_two_profiles(profile2, profile2)
display_two_profiles(profile2, profile3)
display_two_profiles(profile2, profile4)
print()
display_two_profiles(profile3, profile1)
display_two_profiles(profile3, profile2)
display_two_profiles(profile3, profile3)
display_two_profiles(profile3, profile4)
print()
display_two_profiles(profile4, profile1)
display_two_profiles(profile4, profile2)
display_two_profiles(profile4, profile3)
display_two_profiles(profile4, profile4)
print()

profile5 = DateProfile('F', 'M', 1, 5, "Test")
print(profile5.to_string())
profile5.set_defaults()
print(profile5.to_string())
print()
profile5.set_name("1")
profile5.set_gender('H')
profile5.set_finance("0")
profile5.set_romance("12")
print()

    # -----------------Part 2 ------------------------

profiles = [profile1, profile2, profile3, profile4]
for profile in profiles:
    print("Data Profile:\n  " + str(profile))

for profile in profiles:
    num = 0
    print()
    while num < 4:
        display_two_profiles(profile, profiles[num])
        num += 1

---------------------------RUN--------------------------------

Data Profile:
  Yevgen(M) searching for F, w/fin=10 and rom=10
Data Profile:
  Nastia(F) searching for M, w/fin=10 and rom=10
Data Profile:
  Alex(F) searching for F, w/fin=7 and rom=2
Data Profile:
  Lili(F) searching for F, w/fin=5 and rom=3

Fit between Yevgen and Yevgen:  0.000.
Fit between Yevgen and Nastia:  1.000.
Fit between Yevgen and Alex:  0.000.
Fit between Yevgen and Lili:  0.000.

Fit between Nastia and Yevgen:  1.000.
Fit between Nastia and Nastia:  0.000.
Fit between Nastia and Alex:  0.000.
Fit between Nastia and Lili:  0.000.

Fit between Alex and Yevgen:  0.000.
Fit between Alex and Nastia:  0.000.
Fit between Alex and Alex:  1.000.
Fit between Alex and Lili:  0.850.

Fit between Lili and Yevgen:  0.000.
Fit between Lili and Nastia:  0.000.
Fit between Lili and Alex:  0.850.
Fit between Lili and Lili:  1.000.

Test(F) searching for M, w/fin=5 and rom=1
NO NAME(M) searching for F, w/fin=1 and rom=1

1  name length is to small
H  is invalid gender
0  is invalid number should be from 1 to 10
12  is invalid number should be from 1 to 10

Data Profile:
  Yevgen(M) searching for F, w/fin=10 and rom=10
Data Profile:
  Nastia(F) searching for M, w/fin=10 and rom=10
Data Profile:
  Alex(F) searching for F, w/fin=7 and rom=2
Data Profile:
  Lili(F) searching for F, w/fin=5 and rom=3

Fit between Yevgen and Yevgen:  0.000.
Fit between Yevgen and Nastia:  1.000.
Fit between Yevgen and Alex:  0.000.
Fit between Yevgen and Lili:  0.000.

Fit between Nastia and Yevgen:  1.000.
Fit between Nastia and Nastia:  0.000.
Fit between Nastia and Alex:  0.000.
Fit between Nastia and Lili:  0.000.

Fit between Alex and Yevgen:  0.000.
Fit between Alex and Nastia:  0.000.
Fit between Alex and Alex:  1.000.
Fit between Alex and Lili:  0.850.

Fit between Lili and Yevgen:  0.000.
Fit between Lili and Nastia:  0.000.
Fit between Lili and Alex:  0.850.
Fit between Lili and Lili:  1.000.

